class Solution {
public:
	int maxi(int a, int b, int c) {
		if (a >= b && a >= c)
			return a;
		else if (b > a && b >= c)
			return b;
		else
			return c;
	}
	int max_accross(vector<int>& nums,int low, int mid, int high) {
		int left_max = INT_MIN;
		int sum = 0;
		for (int i = mid; i >= low; i--) {
			sum += nums.at(i);
			if (sum > left_max) 
				left_max = sum;
		}
		int right_max = INT_MIN;
		sum = 0;
		for (int i = mid + 1; i <= high; i++) {
			sum += nums.at(i);
			if (sum > right_max)
				right_max = sum;
		}

		return maxi(left_max, left_max + right_max, right_max);
	}
	int maxarray(vector<int> &nums, int low, int high) {
		int left_max, right_max, mid, left_right;
		if (low == high)
			return nums[low];
		else {
			mid = (low + high) / 2;
			left_max = maxarray(nums, low, mid);
			right_max = maxarray(nums, mid + 1, high);
			left_right = max_accross(nums, low, mid, high);
		}
			return maxi(left_max, right_max, left_right);
		
	}
	int maxSubArray(vector<int>& nums) {
		return maxarray(nums,0,nums.size()-1);
	}
};

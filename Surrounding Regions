class Solution {
public:
	int flag = 0;
	set<int> dict;
		void recurse(vector<vector<char>>& board, int i, int j) {
			if (board[i][j] == 'O')
			{
				board[i][j] = 'F';
				if (i - 1 > 0)
					recurse(board, i - 1, j);
				if (i + 1 < board.size() - 1)
					recurse(board, i + 1, j);
				if (j - 1 > 0)
					recurse(board, i, j - 1);
				if (j + 1 < board[0].size() - 1)
					recurse(board, i, j + 1);
			}
		}
		void solve(vector<vector<char>>& board) {
			if (!board.size())
				return;
			for (int j = 0; j < board[0].size(); j++) {
				recurse(board, 0, j);
			}
			for (int j = 0; j < board.size(); j++) {
				recurse(board, j, 0);
			}
			for (int j = 0; j < board[0].size(); j++) {
				recurse(board, board.size()-1, j);
			}
			for (int j = 0; j < board.size(); j++) {
				recurse(board, j, board[0].size() - 1);
			}
			for (int i = 0; i < board.size(); i++) {
				for (int j = 0; j < board[0].size(); j++) {
					if (board[i][j] == 'F')
						board[i][j] = 'O';
					else if (board[i][j] == 'O')
						board[i][j] = 'X';
				}
			}
		}

};

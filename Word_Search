class Solution {
public:
	bool recurse(vector<vector<char>>& board, string word, int i, int j,int pos){
		if (pos == word.length())
			return 1;

		if (word[pos] != board[i][j] || board[i][j] == '\0')
			return 0;

		char l = board[i][j];
		board[i][j] = '\0';

		bool a = 0, b = 0, c = 0, d = 0;
		if (i + 1 < board.size())
			a = recurse(board, word, i+1, j,pos+1);
		if(i-1>=0)
			b = recurse(board, word, i-1, j,pos+1);
		if (j+1<board[0].size())
			c = recurse(board, word, i, j + 1,pos+1);
		if (j - 1>=0)
			d = recurse(board, word, i, j-1,pos+1);

		board[i][j] = l;
		return a | b | c | d;
	}
	bool exist(vector<vector<char>>& board, string word) {
		vector<vector<char>> board1;
		for (int i = 0; i < board.size(); i++) {
			for (int j = 0; j < board[0].size(); j++) {
					if (recurse(board, word,i,j,0))
						return 1;
				}
			}
		return 0;
	}
};

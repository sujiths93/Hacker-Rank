class Solution {
public:
	bool search(vector<int> vec,int target) {
		int beg = 0, end = vec.size() - 1;
		while (beg <= end) {
			int mid = (beg + end) / 2;
			if (target == vec[mid])
				return 1;
			if (target < vec[mid]) {
				beg = mid+1 ;
			}
			else
				end = mid - 1;
		}
		return 0;
	}

	bool searchMatrix(vector<vector<int>>& matrix, int target) {
		if (target > matrix[matrix.size() - 1][matrix[0].size() - 1])
			return 0;
		if (target < matrix[0][0])
			return 0;
		int i=0, j=0;
		int flag = 0;
		for (i = 0; i <= matrix.size()-1;) {
			if (target == matrix[i][matrix[0].size()-1])
				return 1;
			if (target > matrix[i][matrix[0].size()-1]) {
				++i;
			}
			else {
				break;
			}
		}
		vector<int> vec;
		for (int j = matrix[0].size()-1; j >=0; --j) {
			vec.push_back(matrix[i][j]);
		}
		return search(vec,target);
		
		
	}
};

//REMOVE K DIGITS
/*Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.
Note:
The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.
*/

class Solution {
public:
    string removeKdigits(string num, int k) {
    	//special case to handle if k > number of digits given in the string.
        if(k>=num.length())
            return "0";
        if(!k)
            return num;

  		vector<int> st;
  		st.push_back(num[0]-'0');

  		for(int i=1;i<num.length();i++){
  			while(k && st[st.size()-1]>num[i]-'0'){
  				st.pop_back();
  				--k;
  			}
  			st.push_back(num[i]-'0');
  		
  		}
  		
  		while(st.size()>num.size()-k){
  		    st.pop_back();
  		}
  		    
  		num="";
  		std::reverse(st.begin(),st.end());
  		for(int i=st.size()-1;i>=0;i--){
  		    if(st[i]>0)
  		        break;
  		    else
  		        st.pop_back();
  		}
  		if(!st.size())
  		    return "0";
  		for(int i=st.size()-1;i>=0;i--){
  		    num+=st[i]+'0';
  		}
  		return num;
    }
};